#include <stdio.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <cuda_runtime_api.h>
#include <errno.h>
#include <unistd.h>

/******************************************************************************
 * The variable names and the function names of this program is same as provided by the university.
  The added variable and function are the only changes made to this program. 


 * To compile:
 *   nvcc -o LinearCuda23 LinearCuda23.cu -lm
 * 
 * To run:
 *   ./LinearCuda23
 * 
 *****************************************************************************/

typedef struct point_t {
  double x;
  double y;
} point_t;

int n_data = 1000;
__device__ int d_n_data = 1000;

point_t data[] = {
  {83.75,118.67},{65.39,101.66},{85.07,106.29},{82.05,126.19},
  {65.02,93.63},{86.88,119.21},{71.24,105.35},{79.67,119.38},
  {84.53,112.33},{65.40,102.70},{77.58,116.19},{69.55,116.98},
  { 7.82,32.90},{17.18,53.92},{60.78,96.65},{95.66,142.19},
  {54.53,79.59},{ 2.41,20.91},{38.82,82.89},{87.34,119.20},
  {74.00,98.48},{43.23,60.36},{16.39,38.35},{89.42,133.30},
  {89.80,119.12},{ 9.29,12.20},{28.94,63.52},{62.76,109.86},
  {12.52,39.35},{65.57,95.87},{18.36,46.02},{42.37,78.87},
  {14.06,41.67},{62.54,94.94},{63.99,114.66},{37.93,58.91},
  {45.08,79.81},{55.85,86.91},{48.72,81.14},{17.15,68.05},
  {62.37,93.25},{37.29,81.05},{23.29,29.73},{28.19,64.88},
  {21.55,67.49},{78.91,114.83},{ 8.96,17.63},{44.41,87.54},
  {37.84,58.90},{88.51,133.10},{53.54,101.22},{24.80,36.14},
  {74.46,112.14},{85.39,117.84},{ 1.38,16.30},{40.69,75.10},
  {42.47,67.02},{53.25,84.65},{71.64,98.40},{98.00,123.50},
  {88.82,117.93},{42.26,73.00},{20.33,42.69},{ 9.92,29.16},
  { 2.55,25.46},{12.06,36.49},{39.42,79.10},{72.94,121.11},
  {26.11,59.67},{63.21,107.99},{75.16,104.01},{39.90,80.96},
  {82.25,124.86},{11.50,43.55},{76.71,134.96},{48.96,79.53},
  {43.12,69.27},{91.76,125.81},{80.94,107.32},{51.00,90.82},
  {19.61,45.47},{87.39,119.14},{57.28,107.81},{98.60,147.47},
  {65.50,94.78},{34.43,71.21},{28.71,54.88},{ 8.83,43.68},
  {87.25,132.31},{38.08,61.28},{15.23,40.95},{ 0.11,22.91},
  {19.62,36.19},{71.17,117.83},{13.75,16.85},{21.57,45.11},
  {72.13,124.41},{92.37,127.90},{58.10,90.88},{44.42,73.31},
  {44.25,62.77},{ 4.95, 5.26},{37.24,66.31},{12.48,44.26},
  {47.08,69.41},{42.58,77.71},{ 8.19,31.37},{49.45,82.24},
  {49.21,76.50},{22.20,53.11},{35.29,56.26},{54.91,91.32},
  {67.39,115.19},{60.90,98.89},{64.68,103.68},{97.79,166.98},
  {47.72,66.47},{75.18,118.42},{20.64,50.62},{60.35,100.35},
  {91.19,113.24},{31.46,62.51},{ 4.23,10.21},{59.62,111.35},
  { 2.84,31.09},{88.21,110.50},{98.84,143.44},{51.12,72.18},
  {15.96,37.22},{96.18,129.06},{73.38,120.70},{80.12,113.11},
  {72.96,108.25},{91.59,118.80},{62.69,98.90},{95.55,116.97},
  {80.86,125.98},{98.35,146.84},{47.91,67.67},{59.17,93.27},
  {58.50,88.97},{83.68,101.19},{29.50,59.79},{88.68,121.61},
  {86.83,118.34},{33.95,63.98},{31.49,54.05},{30.66,77.17},
  {47.80,84.10},{29.41,61.95},{15.53,44.12},{18.62,57.61},
  {88.39,109.81},{29.85,58.49},{42.20,69.60},{96.20,146.41},
  {32.47,57.83},{37.64,75.72},{41.76,75.15},{89.87,130.53},
  {58.80,88.58},{50.61,81.42},{92.63,139.40},{53.20,91.33},
  {82.77,116.06},{68.41,100.00},{ 1.34,22.77},{25.52,52.31},
  {25.54,64.40},{24.41,61.23},{10.68,30.72},{61.77,94.66},
  {13.73,40.24},{39.52,78.35},{73.60,114.04},{22.27,49.45},
  { 5.15,24.54},{90.52,139.08},{33.64,53.55},{62.59,105.98},
  { 4.85,31.01},{55.67,103.45},{77.73,103.39},{53.09,82.65},
  {99.96,147.78},{30.55,54.82},{13.21,47.20},{72.01,117.42},
  {23.55,44.35},{41.78,64.62},{18.49,48.55},{ 9.27,21.40},
  {84.15,144.37},{ 1.66,12.63},{42.33,87.45},{77.87,112.36},
  {93.04,129.71},{ 9.88,34.42},{98.58,122.42},{63.42,94.73},
  {37.23,68.05},{71.90,105.82},{69.66,111.76},{96.12,132.47},
  {87.62,137.66},{66.70,113.95},{82.25,122.42},{23.38,63.45},
  { 7.59,36.48},{49.47,82.61},{20.45,48.67},{39.40,65.83},
  {55.73,90.34},{38.41,69.94},{42.19,75.47},{35.30,61.01},
  {75.43,112.95},{83.09,109.39},{22.58,26.39},{63.86,92.74},
  {71.53,98.11},{23.35,49.27},{64.31,104.98},{98.00,141.73},
  {18.54,53.68},{52.36,103.00},{ 2.17,-4.16},{17.20,46.20},
  {85.64,125.02},{74.63,102.27},{23.42,30.41},{99.15,138.73},
  {74.75,125.90},{68.98,114.47},{81.36,109.67},{41.91,80.29},
  {21.63,61.39},{72.65,104.90},{58.87,88.11},{29.91,50.02},
  {69.29,106.78},{59.04,83.31},{10.83,36.99},{44.44,91.11},
  {77.11,112.21},{93.30,138.72},{ 1.39,28.97},{ 9.04,25.24},
  {61.93,106.63},{28.21,45.20},{65.53,77.56},{71.98,100.65},
  {66.17,108.26},{24.87,61.31},{ 4.70,22.98},{37.38,58.86},
  {70.27,96.01},{80.37,99.71},{10.64,29.10},{67.34,102.47},
  {18.50,48.60},{16.13,55.29},{83.27,135.91},{71.33,113.41},
  { 6.39,31.52},{23.43,69.24},{53.64,88.54},{68.69,125.00},
  {66.09,92.48},{14.51,26.56},{60.59,84.27},{42.04,66.42},
  {69.99,101.73},{42.42,61.44},{58.55,93.80},{ 6.87,41.10},
  {97.91,132.55},{90.66,138.46},{35.91,69.76},{71.03,114.41},
  {54.80,73.46},{90.75,140.38},{36.87,74.61},{68.32,92.50},
  {40.72,68.91},{13.77,48.45},{80.14,123.94},{47.54,86.62},
  {15.83,53.42},{28.86,48.61},{78.74,113.06},{82.13,121.27},
  {54.55,78.25},{ 8.12,17.75},{48.15,64.32},{32.93,73.89},
  {99.27,138.69},{52.55,91.30},{75.78,115.79},{18.34,34.08},
  {56.06,93.31},{18.92,50.92},{83.07,111.57},{79.94,123.95},
  {12.86,39.11},{59.71,93.48},{48.80,85.88},{ 8.52,35.02},
  {68.81,102.21},{54.40,87.47},{85.19,116.73},{56.09,108.44},
  {25.03,47.72},{93.98,147.59},{16.48,39.92},{71.53,108.71},
  {48.80,77.32},{53.33,88.69},{16.47,38.44},{ 4.09,30.12},
  {52.32,76.48},{41.42,57.20},{24.92,31.65},{97.91,136.69},
  {23.61,56.62},{22.94,38.81},{ 5.91,36.75},{98.28,129.44},
  {59.39,91.48},{39.01,85.78},{76.65,118.16},{78.51,97.38},
  {28.27,69.41},{93.49,131.12},{99.00,133.08},{20.12,41.05},
  {86.31,141.82},{98.73,141.91},{59.85,86.89},{82.71,109.78},
  {92.80,110.81},{96.64,149.22},{ 4.58,12.25},{65.19,98.24},
  {65.03,101.08},{90.07,138.96},{36.92,70.74},{47.17,95.90},
  {90.48,141.13},{78.19,124.33},{14.14,49.29},{18.64,29.16},
  {59.45,72.83},{34.36,45.69},{81.90,138.91},{30.44,38.71},
  {24.88,54.93},{78.91,105.35},{81.84,110.38},{ 7.51,30.76},
  {92.59,142.11},{69.39,102.13},{25.92,35.64},{19.12,54.70},
  { 6.39,21.17},{86.62,126.98},{54.34,76.73},{ 7.90,25.38},
  {12.73,42.82},{73.62,111.17},{11.27,46.05},{69.75,102.88},
  {47.36,77.07},{28.66,68.55},{15.71,32.10},{80.27,117.69},
  {41.09,58.01},{81.12,95.28},{ 3.47,35.43},{90.92,142.71},
  {87.09,138.78},{78.26,111.10},{45.92,78.25},{30.48,57.16},
  {43.31,71.36},{16.01,49.03},{19.58,47.39},{41.18,62.88},
  {44.26,81.85},{94.33,140.88},{32.51,60.55},{31.49,72.01},
  {22.36,60.03},{29.26,56.08},{87.34,139.69},{ 1.98,21.97},
  {72.81,111.85},{84.73,114.71},{57.48,67.68},{53.23,101.93},
  {33.39,63.47},{84.85,117.10},{ 6.35,48.63},{22.12,40.39},
  {27.49,46.96},{ 9.94,32.46},{71.67,101.10},{79.66,117.32},
  {17.32,51.74},{97.20,124.91},{14.00,35.93},{59.99,80.18},
  {42.26,77.56},{ 2.54,29.43},{65.66,110.15},{23.20,43.77},
  {53.57,70.98},{69.10,97.71},{95.76,140.56},{98.38,122.45},
  {13.50,53.58},{75.89,92.35},{98.48,149.02},{57.37,86.35},
  {35.13,60.18},{17.96,53.73},{36.98,66.05},{65.39,102.31},
  {53.85,82.51},{ 0.84,20.19},{38.40,79.33},{11.17,26.60},
  {19.91,51.67},{ 5.21,20.00},{27.97,71.28},{21.43,45.48},
  {47.26,90.59},{49.40,82.85},{48.56,75.55},{48.85,85.40},
  {45.21,77.72},{49.72,84.36},{45.93,80.24},{54.78,81.96},
  {30.29,70.75},{95.17,137.13},{90.19,134.55},{77.31,107.50},
  {37.54,64.17},{63.50,90.44},{93.09,135.64},{ 9.53,38.50},
  {67.36,107.36},{ 9.10,23.44},{ 5.16,24.68},{22.77,47.46},
  {87.40,137.41},{ 2.89,37.12},{19.80,63.11},{52.32,91.64},
  {40.60,66.84},{72.99,112.17},{72.51,99.34},{83.96,130.77},
  { 9.13,40.08},{53.87,100.85},{ 3.03,28.50},{68.67,115.56},
  {73.85,114.44},{74.94,122.07},{33.78,69.93},{34.73,71.00},
  {87.04,120.11},{54.90,98.92},{56.44,99.42},{22.27,53.82},
  {24.97,49.09},{55.42,102.95},{80.13,111.91},{29.26,42.47},
  {89.58,146.88},{76.54,123.06},{71.75,113.76},{68.02,92.60},
  {98.65,127.54},{59.45,105.05},{90.86,124.27},{60.44,90.88},
  {59.79,91.76},{61.00,102.76},{21.67,32.68},{72.02,106.20},
  {73.96,107.34},{89.02,134.18},{31.82,47.79},{35.74,62.36},
  {72.71,109.32},{49.65,80.03},{ 4.14,28.49},{34.89,77.87},
  {21.48,43.73},{86.59,140.00},{98.73,135.88},{69.85,116.82},
  {31.25,51.11},{61.04,116.43},{48.91,81.97},{83.58,124.31},
  {65.40,99.93},{ 6.92,35.64},{39.85,70.07},{86.40,135.96},
  {11.70,35.62},{52.21,85.79},{91.66,146.39},{85.66,120.78},
  {70.40,102.30},{ 3.05,34.51},{15.74,51.87},{96.98,147.92},
  {97.61,132.71},{22.10,60.67},{71.35,109.07},{45.90,66.02},
  {90.02,130.22},{84.65,131.08},{44.83,73.83},{73.79,98.38},
  {64.52,117.03},{76.56,116.73},{37.55,83.38},{77.07,102.37},
  {29.74,48.91},{77.48,125.69},{86.57,107.86},{20.57,58.32},
  {13.62,39.78},{79.06,126.03},{84.99,109.17},{46.97,65.59},
  {93.26,139.32},{69.41,131.62},{53.02,92.48},{21.54,48.90},
  {92.02,156.92},{53.28,97.19},{12.56,32.78},{ 0.94,24.79},
  {84.41,127.75},{38.25,54.06},{55.54,86.40},{14.04,34.05},
  {74.39,104.99},{92.68,125.64},{11.78,44.32},{ 9.84,36.67},
  {12.08,20.95},{49.14,84.79},{81.03,113.23},{50.67,90.35},
  {49.59,85.98},{28.14,75.60},{80.39,115.54},{ 4.97,20.75},
  {57.22,92.03},{15.77,44.08},{54.44,95.57},{97.52,142.09},
  {67.59,100.30},{ 5.54,33.73},{15.77,30.63},{94.47,128.71},
  {22.17,33.37},{40.84,66.71},{34.17,64.82},{58.86,119.32},
  {82.67,126.61},{84.16,126.33},{13.90,44.48},{96.60,146.34},
  {33.47,44.75},{33.28,61.51},{81.30,125.22},{51.21,82.15},
  {28.30,66.22},{17.09,39.97},{ 3.48,20.86},{ 5.97,20.54},
  {57.94,84.38},{86.56,124.49},{68.89,84.11},{ 8.56,21.29},
  {64.91,114.00},{88.10,133.08},{94.81,128.56},{47.71,94.10},
  {80.94,106.29},{78.50,113.17},{61.44,95.65},{59.30,77.90},
  {61.33,94.68},{76.14,116.05},{10.78,40.55},{11.22,39.14},
  {54.29,85.48},{ 6.83,23.29},{75.34,102.19},{71.41,101.86},
  {18.18,32.86},{34.36,51.06},{99.72,141.83},{33.18,49.33},
  { 6.36,41.88},{53.37,71.47},{82.70,126.14},{62.97,109.22},
  {25.27,57.24},{63.91,88.12},{97.06,139.62},{88.49,154.48},
  {35.40,74.02},{18.93,27.93},{10.65,27.65},{75.10,124.76},
  {82.30,125.42},{31.07,57.99},{12.21, 6.45},{53.02,77.96},
  {65.89,92.75},{55.97,92.58},{97.73,131.02},{71.62,112.82},
  {21.36,47.05},{13.02,28.42},{ 9.32,34.13},{83.85,131.95},
  {55.27,94.79},{79.05,131.14},{87.53,134.86},{ 7.16,32.28},
  {30.90,46.98},{68.79,114.77},{77.31,117.63},{32.70,55.66},
  { 6.75,34.00},{ 1.32,42.56},{73.40,115.95},{74.08,104.94},
  {58.30,85.92},{ 7.33,43.57},{49.40,75.41},{16.11,36.94},
  {64.22,107.61},{29.22,54.67},{95.73,126.04},{98.83,137.31},
  { 9.03,29.56},{53.38,87.98},{64.24,109.27},{20.85,40.00},
  {68.19,95.47},{83.25,123.79},{62.25,85.77},{39.51,60.36},
  {72.77,115.39},{61.35,92.49},{91.41,123.77},{44.33,84.76},
  {41.27,61.30},{11.73,34.87},{18.58,44.20},{28.97,56.56},
  {21.35,33.73},{56.25,67.33},{30.02,57.34},{20.86,53.93},
  { 6.67,47.33},{33.88,63.77},{38.09,78.21},{51.16,86.21},
  {61.87,96.46},{50.68,65.42},{78.39,113.70},{85.92,140.99},
  { 6.07,13.67},{43.42,79.17},{48.98,80.40},{92.76,136.51},
  {52.64,88.91},{ 3.99,25.10},{30.88,68.25},{17.49,45.89},
  {10.65,48.51},{78.17,106.84},{73.74,88.89},{92.01,133.86},
  {44.71,80.40},{99.50,139.16},{56.55,82.26},{90.83,123.13},
  {90.98,108.61},{82.38,105.03},{ 0.35, 1.51},{11.79,42.76},
  {66.28,92.19},{53.25,88.92},{76.49,130.85},{45.65,79.89},
  {35.96,81.78},{83.36,123.61},{50.46,93.10},{23.90,38.39},
  {89.95,130.72},{60.46,94.58},{34.32,58.75},{94.80,121.98},
  {67.78,110.95},{ 2.67,26.33},{66.40,99.56},{46.54,59.75},
  {54.70,95.70},{42.11,64.58},{47.53,70.94},{45.51,73.06},
  {59.51,82.15},{31.66,54.80},{19.28,47.21},{75.09,104.35},
  {58.84,87.75},{95.29,142.80},{50.24,85.02},{51.43,81.51},
  {93.42,153.75},{18.56,46.40},{42.82,69.97},{21.15,45.72},
  {67.85,118.12},{63.02,118.66},{85.82,144.81},{22.63,46.42},
  {86.99,123.76},{45.04,77.08},{27.61,61.75},{36.76,81.30},
  {18.83,42.89},{56.56,98.09},{41.15,71.70},{72.26,117.21},
  {70.32,113.95},{73.67,85.48},{19.15,53.09},{29.88,49.78},
  {92.06,137.43},{96.19,138.09},{52.41,82.20},{51.91,88.56},
  {18.34,48.50},{27.16,38.88},{32.02,54.77},{ 3.96,34.56},
  {96.16,151.27},{20.24,35.79},{75.28,114.89},{21.93,56.60},
  {45.43,60.03},{ 7.53,38.77},{16.20,35.03},{81.02,124.67},
  { 2.18,13.73},{73.59,102.57},{53.98,84.75},{12.45,27.93},
  {86.54,114.47},{24.41,54.87},{ 9.22,26.94},{30.75,58.85},
  {71.27,113.28},{92.74,141.64},{99.83,149.23},{77.56,110.83},
  {30.12,60.15},{93.49,136.46},{73.26,103.97},{69.33,82.41},
  {50.91,81.53},{15.39,35.87},{ 8.29,31.31},{ 3.02,28.10},
  { 2.75,30.35},{72.22,107.45},{19.36,44.57},{81.49,107.37},
  {82.54,117.65},{92.92,132.02},{ 4.10,38.74},{70.09,109.83},
  {37.15,60.83},{ 2.65,46.01},{ 1.52,15.97},{73.29,112.60},
  {40.21,77.24},{ 3.36,33.95},{15.16,44.25},{41.38,62.42},
  {53.03,73.20},{61.95,101.75},{ 4.56,51.60},{22.25,35.68},
  {59.87,79.32},{32.17,58.82},{54.62,100.88},{23.45,48.96},
  {78.17,109.88},{82.76,129.28},{94.62,140.35},{96.83,138.32},
  {81.90,124.67},{10.65,37.55},{83.34,108.57},{68.13,92.20},
  {55.84,101.09},{81.61,121.85},{56.38,73.35},{95.54,134.70},
  {75.90,119.06},{ 7.48,31.48},{ 9.00,35.82},{ 9.96,42.68},
  {61.48,92.97},{57.77,103.67},{ 3.05,33.78},{75.59,99.21},
  {88.15,131.27},{37.89,89.05},{61.30,97.82},{20.31,45.72},
  {15.35,33.89},{60.60,71.55},{83.02,121.26},{90.29,126.40},
  {71.33,100.58},{28.58,51.35},{41.03,60.54},{43.58,74.00},
  {16.70,34.75},{43.95,62.34},{78.49,131.17},{91.27,136.83},
  {27.21,42.66},{51.22,88.84},{55.51,69.62},{31.16,58.72},
  {48.68,82.93},{67.20,97.65},{76.59,113.80},{78.86,106.94},
  {74.28,122.24},{92.07,140.21},{88.87,117.31},{89.98,120.63},
  {34.11,77.94},{36.72,74.56},{91.01,125.62},{89.11,138.84},
  {45.31,77.68},{79.15,117.23},{57.08,77.29},{ 7.06,26.24},
  {47.34,84.14},{76.97,100.83},{54.82,79.37},{18.32,36.82},
  {75.88,122.60},{97.38,145.77},{74.12,109.78},{46.63,79.58},
  {50.26,82.26},{99.94,145.28},{ 2.37, 8.29},{18.38,41.90},
  {18.06,30.70},{16.30,56.68},{38.32,61.83},{ 7.89,42.54},
  { 2.97,16.00},{ 1.51, 9.78},{42.49,76.79},{70.50,102.00},
  {10.44,52.70},{78.76,103.48},{73.20,108.86},{95.71,160.23},
  {88.27,106.88},{17.58,51.71},{36.59,76.48},{91.87,149.06},
  {24.89,58.67},{73.61,103.57},{37.47,69.55},{53.12,73.71},
  {35.54,68.02},{65.16,94.42},{72.17,102.75},{17.40,39.61},
  {11.63,16.90},{25.90,49.42},{32.97,53.16},{53.15,90.35},
  {88.36,123.01},{27.08,50.02},{46.71,78.62},{50.75,75.14},
  {96.37,148.51},{42.25,74.96},{42.23,69.36},{88.33,140.87},
  {88.03,117.20},{35.67,71.89},{42.62,71.84},{85.46,132.66},
  {44.30,77.32},{89.39,126.03},{60.71,92.00},{25.10,42.76},
  {61.86,104.20},{80.55,115.34},{23.73,52.72},{48.71,95.17},
  {98.19,119.33},{28.93,43.04},{ 9.05,24.61},{95.14,143.23},
  {96.41,120.66},{80.86,124.66},{74.86,109.88},{ 4.95,29.06},
  { 2.85,24.11},{73.48,116.74},{34.23,63.25},{35.31,57.88},
  {79.99,131.47},{58.64,89.07},{99.20,120.10},{30.56,55.43},
  {90.40,140.96},{64.68,85.87},{30.90,47.43},{97.81,149.27},
  {55.66,91.35},{98.56,150.47},{13.16,56.01},{99.30,144.81},
  {99.68,149.24},{77.98,103.80},{30.69,60.69},{45.24,72.95},
  {15.98,58.70},{63.51,100.51},{37.19,57.94},{47.49,82.45},
  {40.22,65.89},{14.91,42.02},{23.66,40.85},{22.76,43.30},
  {54.64,83.48},{ 1.72,46.16},{32.58,73.04},{47.62,74.83},
  {61.58,83.42},{53.90,94.55},{75.95,110.79},{98.29,136.56},
  {64.07,95.83},{82.74,128.64},{12.12,40.16},{60.94,99.19},
  {67.18,121.13},{20.24,53.75},{93.86,150.73},{12.01,35.91},
  {84.15,121.01},{63.59,94.71},{ 3.13,24.12},{ 1.59,20.92},
  {42.93,83.87},{32.37,66.00},{68.00,105.75},{68.08,104.43},
  {31.93,41.59},{ 3.00,43.87},{82.91,107.07},{20.91,59.41},
  {92.23,152.77},{ 2.98,24.63},{76.33,135.15},{85.80,131.28},
  {62.44,87.79},{15.26,50.95},{39.40,66.25},{47.52,83.40}
};





double residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

__device__ double d_residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

double rms_error(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
  
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].x, data[i].y, m, c);
  }
  
  mean = error_sum / n_data;
  
  return sqrt(mean);
}

__global__ void d_rms_error(double *m, double *c, double *error_sum_arr, point_t *d_data) {

	int i = threadIdx.x + blockIdx.x * blockDim.x;

  error_sum_arr[i] = d_residual_error(d_data[i].x, d_data[i].y, *m, *c);
}

// Calculate the difference between two times. Returns zero on
// success and the time difference through an argument. It will 
// be unsuccessful if the start time is after the end time.

int time_difference(struct timespec *start, 
                    struct timespec *finish, 
                    long long int *difference) {
  long long int d_sec =  finish->tv_sec - start->tv_sec; 
  long long int d_nsec =  finish->tv_nsec - start->tv_nsec; 

  if(d_nsec < 0 ) {
    d_sec--;
    d_nsec += 1000000000; 
  } 
  *difference = d_sec * 1000000000 + d_nsec;
  return !(*difference > 0);
}

int main() {
  int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;
  
  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

	struct timespec start, finish;   
  long long int time_elapsed;

	
  clock_gettime(CLOCK_MONOTONIC, &start);

	cudaError_t error;

	
  double *d_dm;
  double *d_dc;
	double *d_error_sum_arr;
	point_t *d_data;
	
  be = rms_error(bm, bc);

	
	error = cudaMalloc(&d_dm, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dm returned %d %s\n", error,
    	cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_dc, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dc returned %d %s\n", error,
  	  cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_error_sum_arr, (sizeof(double) * 1000));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_error_sum_arr returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

	
	error = cudaMalloc(&d_data, sizeof(data));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_data returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

  while(!minimum_found) {
    for(i=0;i<8;i++) {
      dm[i] = bm + (om[i] * step);
      dc[i] = bc + (oc[i] * step);    
    }

		
  	error = cudaMemcpy(d_dm, dm, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dm returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_dc, dc, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dc returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_data returned %d %s\n", error,
      cudaGetErrorString(error));
  	}
		
    for(i=0;i<8;i++) {
			
			double h_error_sum_arr[1000];
			double error_sum_total;
			double error_sum_mean;
			d_rms_error <<<100,10>>>(&d_dm[i], &d_dc[i], d_error_sum_arr, d_data);
			cudaThreadSynchronize();
		  error = cudaMemcpy(&h_error_sum_arr, d_error_sum_arr, (sizeof(double) * 1000), cudaMemcpyDeviceToHost);  
		  if(error){
	    fprintf(stderr, "cudaMemcpy to error_sum returned %d %s\n", error,
	      cudaGetErrorString(error));
		  }
			for(int j=0; j<n_data; j++) {
    		error_sum_total += h_error_sum_arr[j];
  		}

			error_sum_mean = error_sum_total / n_data;
			e[i] = sqrt(error_sum_mean);

      if(e[i] < best_error) {
        best_error = e[i];
        best_error_i = i;
      }

			error_sum_total = 0;
    }


    if(best_error < be) {
      be = best_error;
      bm = dm[best_error_i];
      bc = dc[best_error_i];
    } else {
      minimum_found = 1;
    }
  }

	error = cudaFree(d_dm);
	if(error){
		fprintf(stderr, "cudaFree on d_dm returned %d %s\n", error,
	  	cudaGetErrorString(error));
		exit(1);
	}
	
	error = cudaFree(d_dc);
	if(error){
		fprintf(stderr, "cudaFree on d_dc returned %d %s\n", error,
			cudaGetErrorString(error));
		exit(1);
	}

	error = cudaFree(d_data);
	if(error){
		fprintf(stderr, "cudaFree on d_data returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}
		
	error = cudaFree(d_error_sum_arr);
	if(error){
		fprintf(stderr, "cudaFree on d_error_sum_arr returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}

  printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

	clock_gettime(CLOCK_MONOTONIC, &finish);

  time_difference(&start, &finish, &time_elapsed);

  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed, 
         (time_elapsed/1.0e9));
	
  return 0;
}
